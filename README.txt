Names: Kelvin Ihezue (netID: ki120)

1)Descriptions of functions in clines.c

- read_lines: This function reads lines from a file descriptor fd and applies a given function use_line to each line. It uses two buffers, buf and original_buf, to store the contents of the file and adjusts their sizes dynamically as needed. The function iterates through the buffers and checks if the current character is a newline or a space, and if so, it saves the starting position of the line, calculates the length of the line, and applies the use_line function to the line. After processing each line, the function adjusts the buffer positions and sizes accordingly. The function also takes in a dict argument to use for spelling checks and a filepath argument to keep track of the current file being processed. The function frees the memory allocated for the buffers at the end.

- compare_each_word: This function checks if a given word is present in a dictionary file. It takes in a word and a dictionary_file as arguments. The function opens the dictionary file and reads each line from the file, removing any trailing newline characters. It then compares the given word to each line using the strcasecmp function, which compares the strings case-insensitively. If the word matches a line in the dictionary, the function sets the found variable to 1 and exits the loop. Finally, the function closes the dictionary file and returns the found variable. This function assumes that the word is stored in word and that the dictionary file is stored in dictionary_file.

- use_line: This function takes in a line of text and a void pointer arg. It checks if the number of words stored so far is less than the maximum word count. If it is, the function stores the line in the words array using the strdup function and increments the word_count variable. If the maximum word count has been reached, the function prints an error message. The DEBUG flag is used to print debugging information. This function assumes that the words array and word_count variable have been previously defined and initialized.

- check_split_words: This function checks if a hyphenated word is spelled correctly by splitting it into individual words and comparing each word to a dictionary file. It takes in a word and a dictionary_file as arguments. The function creates a copy of the word using the strdup function and splits it into individual words using the strtok function. It then compares each word to the dictionary file using the compare_each_word function. If any of the words are not found in the dictionary, the function sets the result variable to 0 and exits the loop. Finally, the function frees the memory allocated for the copy of the word and returns the result variable. This function assumes that the hyphenated word is stored in word and that the dictionary file is stored in dictionary_file. Also, the strtok function modifies the original string, so a copy of the word is made using strdup.

- strip_special_chars: This function removes any non-alphabetic characters from the beginning and end of a given word. It takes in a word as an argument. The function initializes two pointers, start and end, to point to the beginning and end of the word, respectively. It then iterates through the word, skipping any non-alphabetic characters at the beginning, and sets start to point to the first alphabetic character. If the word is empty, the function sets the first character of the word to the null character and returns. The function then iterates through the word again, starting from the end, and sets end to point to the last alphabetic character. Finally, the function copies the alphabetic characters from start to end to the beginning of the word and sets the null character at the end of the copied substring. This function uses the isalpha function from the ctype.h library to check if a character is alphabetic. The cast (unsigned char) is used to avoid undefined behavior when the isalpha function is called with a negative character value.

- print_line: This function takes in a line of text, a dict file path, and a filepath file path as arguments. It opens the dictionary file and checks if each word in the line is spelled correctly using the compare_each_word function. If a word is not found in the dictionary, the function increments the wrong_count variable and prints an error message. If the word contains a hyphen, the function checks if each hyphenated word is spelled correctly using the check_split_words function. The function also removes any non-alphabetic characters from the beginning and end of each word using the strip_special_chars function. The function keeps track of the current line and column number and updates them accordingly. The function also uses the open and close system calls to open and close the dictionary file. This function assumes that the wrong_count variable and row_ct and col_ct variables have been previously defined and initialized. Also, the open and close system calls are used to open and close the dictionary file, respectively.

- main: This function searches a directory and its subdirectories for text files and checks the spelling of each word in the files using the read_lines function and the print_line function. It takes in a dir_path and a dict as arguments. The function opens the directory using the opendir function and iterates through the entries in the directory using the readdir function. If the entry is a directory, the function recursively calls itself with the path of the subdirectory. If the entry is a text file, the function opens the file and reads each line using the read_lines function, passing in the print_line function as an argument. The function also keeps track of the current file being processed and updates the wrong_count variable accordingly. The function uses the open and close system calls to open and close the file, respectively. If the directory cannot be opened, the function prints an error message. Also, this function uses recursion to search through subdirectories, so it should be used carefully to avoid infinite recursion or stack overflow.

Testing: 

We included two text files in the dir folder to detect the number of wrong words and 



- Output form
file directory (number of the line, number of the word): worng word



